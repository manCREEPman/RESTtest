unit FireDACdm;

// EMS Resource Module

interface

uses
  System.SysUtils, System.Classes, System.JSON,
  EMS.Services, EMS.ResourceAPI, EMS.ResourceTypes, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.ConsoleUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.Client, FireDAC.Stan.StorageJSON, Data.DB, FireDAC.Comp.DataSet, Vcl.Dialogs;

type
  [ResourceName('FireDAC')]
  TFireDACResource1 = class(TDataModule)
    FDConnection1: TFDConnection;
    FDStanStorageJSONLink1: TFDStanStorageJSONLink;
    FDSchemaAdapter1: TFDSchemaAdapter;
  published
    function GetDbData(FDQuery: TFDQuery): TJSONObject;
    procedure Get(const AContext: TEndpointContext; const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);
    [ResourceSuffix('{item}')]
    procedure GetItem(const AContext: TEndpointContext; const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);
  end;

implementation

{%CLASSGROUP 'System.Classes.TPersistent'}

{$R *.dfm}

function TFireDACResource1.GetDbData(FDQuery: TFDQuery): TJSONObject;
var dbArrayData: TJSONArray;
mainContainer, dbRow: TJSONObject;
columnName: string;
I: Integer;
begin
    FDQuery.Open();
    FDQuery.First;
    mainContainer:= TJSONObject.Create;
    dbArrayData:= TJSONArray.Create;
    while (not FDQuery.EOF) do
    begin
      dbRow:= TJSONObject.Create;
      for I := 0 to FDQuery.FieldDefs.Count - 1 do
      begin
        columnName:= FDQuery.FieldDefs[I].Name;
        if (FDQuery.FieldByName(columnName).DataType = ftInteger) or (FDQuery.FieldByName(columnName).DataType = ftFloat) then
            dbRow.AddPair(TJSONPair.Create(TJSONString.Create(columnName),
                          TJSONNumber.Create(FDQuery.FieldByName(columnName).AsString)))
        else dbRow.AddPair(TJSONPair.Create(TJSONString.Create(columnName),
                           TJSONString.Create(FDQuery.FieldByName(columnName).AsString)));
      end;
      dbArrayData.Add(dbRow);
      dbRow:= TJSONObject.Create;
      FDQuery.Next;
    end;
    FDQuery.Close;

    mainContainer.AddPair('data', dbArrayData);
    Result:= mainContainer;
end;


procedure TFireDACResource1.Get(const AContext: TEndpointContext; const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);
var
 DbJSONObject: TJSONObject;
 typeData: string;
begin
    DbJSONObject:= TJSONObject.Create;
    ARequest.Headers.TryGetValue('type', typeData);
    if typeData =  'userdata' then DbJSONObject:= GetDbData(FDQuery1);
    if typeData = 'gamedata' then DbJSONObject:= GetDbData(FDQuery2);
          {
    FDQuery.Open();
    FDQuery.First;
    dbArrayData:= TJSONArray.Create;
    while (not FDQuery.EOF) do
    begin
      dbRow:= TJSONObject.Create;
      for I := 0 to FDQuery.FieldDefs.Count - 1 do
      begin
        columnName:= FDQuery.FieldDefs[I].Name;
        if (FDQuery.FieldByName(columnName).DataType = ftInteger) or (FDQuery.FieldByName(columnName).DataType = ftFloat) then
            dbRow.AddPair(TJSONPair.Create(TJSONString.Create(columnName),
                          TJSONNumber.Create(FDQuery.FieldByName(columnName).AsString)))
        else dbRow.AddPair(TJSONPair.Create(TJSONString.Create(columnName),
                           TJSONString.Create(FDQuery.FieldByName(columnName).AsString)));
      end;
      dbArrayData.Add(dbRow);
      dbRow:= TJSONObject.Create;
      FDQuery.Next;
    end;

    FDQuery.Close;
    mainContainer.AddPair('data', dbArrayData);
    }
    AResponse.Body.SetValue(DbJSONObject, True);
end;

procedure TFireDACResource1.GetItem(const AContext: TEndpointContext; const ARequest: TEndpointRequest; const AResponse: TEndpointResponse);
var
  LItem: string;
begin
  LItem := ARequest.Params.Values['item'];
  // Sample code
  AResponse.Body.SetValue(TJSONString.Create('FireDAC ' + LItem), True)
end;

procedure Register;
begin
  RegisterResource(TypeInfo(TFireDACResource1));
end;

initialization
  Register;
end.


